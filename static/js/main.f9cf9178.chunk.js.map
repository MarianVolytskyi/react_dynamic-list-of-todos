{"version":3,"sources":["types/FilterTypes.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","utils/FilterFunction.ts","index.tsx"],"names":["FilterType","TodoList","todos","selectedTodo","setSelectedTodo","className","map","todo","classNames","id","completed","title","type","onClick","handleSelectedTodo","TodoFilter","query","changeQuery","filterType","changeFilterType","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","closeModelWindow","useState","user","setUser","useEffect","userId","href","email","name","App","setTodos","setQuery","setFiltertype","loading","setLoading","visibleTodos","copyTodos","normalizedQuery","trim","toLowerCase","filter","includes","preparedTodos","catch","error","Error","message","finally","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9cf9178.chunk.js","sourcesContent":["export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  setSelectedTodo:(value:Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const handleSelectedTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          todos.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              key={todo.id}\n              className={classNames(\n                { 'has-background-info-light': selectedTodo?.id === todo.id },\n              )}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleSelectedTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      { 'far fa-eye': selectedTodo?.id !== todo.id },\n                      { 'far fa-eye-slash': selectedTodo?.id === todo.id },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n};\n","import { FilterType } from '../../types/FilterTypes';\n\ntype Props = {\n  query: string;\n  changeQuery: (query:string) => void;\n  filterType: FilterType;\n  changeFilterType: (value:FilterType) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  changeQuery,\n  filterType,\n  changeFilterType,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            // eslint-disable-next-line max-len\n            onChange={event => changeFilterType(event.target.value as FilterType)}\n          >\n            <option value={FilterType.All}>All</option>\n            <option value={FilterType.Active}>Active</option>\n            <option value={FilterType.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => changeQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => changeQuery('')}\n            />\n          )}\n\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo;\n  closeModelWindow: (value: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  closeModelWindow,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(setUser);\n    }\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => closeModelWindow(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { FilterType } from './types/FilterTypes';\nimport { preparedTodos } from './utils/FilterFunction';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState<string>('');\n  const [filterType, setFiltertype] = useState(FilterType.All);\n  const [loading, setLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const visibleTodos = preparedTodos(todos, query, filterType);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .catch((error) => {\n        throw new Error(error.message);\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                changeQuery={setQuery}\n                filterType={filterType}\n                changeFilterType={setFiltertype}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodo={selectedTodo}\n                    setSelectedTodo={setSelectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {\n        selectedTodo && (\n          <TodoModal\n            selectedTodo={selectedTodo}\n            closeModelWindow={setSelectedTodo}\n          />\n        )\n      }\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport const preparedTodos = (\n  todos: Todo[],\n  query: string,\n  filterType: string,\n) => {\n  let copyTodos = [...todos];\n\n  if (query) {\n    const normalizedQuery = query.trim().toLowerCase();\n\n    copyTodos = copyTodos.filter(\n      todo => todo.title.toLowerCase().includes(normalizedQuery),\n    );\n  }\n\n  if (filterType) {\n    switch (filterType) {\n      case 'active':\n        copyTodos = copyTodos.filter(todo => !todo.completed);\n        break;\n\n      case 'completed':\n        copyTodos = copyTodos.filter(todo => todo.completed);\n        break;\n\n      case 'all':\n      default:\n        return copyTodos;\n    }\n  }\n\n  return copyTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}